using EVServiceCenter.Core.Enums;

namespace EVServiceCenter.Core.Domains.PackageSubscriptions.DTOs.Responses
{
    /// <summary>
    /// DTO response ƒë·∫ßy ƒë·ªß th√¥ng tin subscription
    /// D√πng khi customer xem chi ti·∫øt subscription c·ªßa m√¨nh
    /// </summary>
    public class PackageSubscriptionResponseDto
    {
        // ========== SUBSCRIPTION INFO ==========
        public int SubscriptionId { get; set; }
        public int CustomerId { get; set; }
        public string CustomerName { get; set; } = null!;
        public int VehicleId { get; set; }
        public string VehiclePlateNumber { get; set; } = null!;
        public string VehicleModelName { get; set; } = null!;

        // ========== PACKAGE INFO ==========
        public int PackageId { get; set; }
        public string PackageCode { get; set; } = null!;
        public string PackageName { get; set; } = null!;
        public string? PackageDescription { get; set; }
        public string? PackageImageUrl { get; set; }

        // ========== SUBSCRIPTION DATES ==========
        public DateTime PurchaseDate { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// S·ªë ng√†y hi·ªáu l·ª±c t·ª´ l√∫c mua
        /// VD: 365 ng√†y = 1 nƒÉm
        /// NULL n·∫øu kh√¥ng gi·ªõi h·∫°n th·ªùi gian
        /// </summary>
        public int? ValidityPeriodInDays { get; set; }

        /// <summary>
        /// S·ªë km hi·ªáu l·ª±c
        /// VD: 10,000 km
        /// NULL n·∫øu kh√¥ng gi·ªõi h·∫°n s·ªë km
        /// </summary>
        public int? ValidityMileage { get; set; }

        /// <summary>
        /// S·ªë km hi·ªán t·∫°i c·ªßa xe khi mua g√≥i
        /// D√πng ƒë·ªÉ t√≠nh c√≤n bao nhi√™u km trong g√≥i
        /// </summary>
        public int? InitialVehicleMileage { get; set; }

        // ========== PRICING ==========
        /// <summary>
        /// ‚úÖ PHASE 2: Gi√° g·ªëc c·ªßa package (ch∆∞a gi·∫£m gi√°)
        /// </summary>
        public decimal? OriginalPrice { get; set; }

        /// <summary>
        /// ‚úÖ PHASE 2: % Discount c·ªßa package
        /// </summary>
        public decimal? DiscountPercent { get; set; }

        /// <summary>
        /// ‚úÖ PHASE 2: S·ªë ti·ªÅn ƒë∆∞·ª£c gi·∫£m (VNƒê)
        /// </summary>
        public decimal? DiscountAmount { get; set; }

        /// <summary>
        /// S·ªë ti·ªÅn customer ƒë√£ thanh to√°n (Final Price sau khi gi·∫£m gi√°)
        /// = OriginalPrice - DiscountAmount
        /// </summary>
        public decimal PricePaid { get; set; }

        /// <summary>
        /// ‚úÖ PHASE 2: Display text cho UI
        /// Hi·ªÉn th·ªã breakdown gi√° cho customer
        /// </summary>
        public string? PricingDisplay
        {
            get
            {
                if (!OriginalPrice.HasValue) return null;

                if (!DiscountPercent.HasValue || DiscountPercent.Value == 0)
                {
                    return $"üí∞ Th√†nh ti·ªÅn: {PricePaid:N0}ƒë";
                }

                return $"üí∞ Gi√° g·ªëc: {OriginalPrice:N0}ƒë\n" +
                       $"üéÅ Gi·∫£m {DiscountPercent}%: -{DiscountAmount:N0}ƒë\n" +
                       $"‚úÖ B·∫°n ti·∫øt ki·ªám: {DiscountAmount:N0}ƒë\n" +
                       $"üí≥ Th√†nh ti·ªÅn: {PricePaid:N0}ƒë";
            }
        }

        // ========== STATUS ==========
        public SubscriptionStatusEnum Status { get; set; }
        public string StatusDisplayName { get; set; } = null!;

        /// <summary>
        /// L√Ω do cancel/suspend (n·∫øu c√≥)
        /// VD: "Kh√°ch y√™u c·∫ßu", "Xe b√°n ƒëi", "Gian l·∫≠n"
        /// </summary>
        public string? CancellationReason { get; set; }
        public DateTime? CancelledDate { get; set; }

        // ========== SERVICE USAGE TRACKING ==========

        /// <summary>
        /// Danh s√°ch services trong subscription v√† usage
        /// </summary>
        public List<PackageServiceUsageDto> ServiceUsages { get; set; } = new();

        /// <summary>
        /// T·ªïng s·ªë services trong g√≥i
        /// </summary>
        public int TotalServicesCount => ServiceUsages.Count;

        /// <summary>
        /// T·ªïng s·ªë l∆∞·ª£t d·ªãch v·ª• (sum all quantities)
        /// VD: 3 d·ªãch v·ª• x 2 l·∫ßn = 6 l∆∞·ª£t
        /// </summary>
        public int TotalServiceQuantity => ServiceUsages.Sum(s => s.TotalAllowedQuantity);

        /// <summary>
        /// ƒê√£ d√πng bao nhi√™u l∆∞·ª£t
        /// </summary>
        public int TotalUsedQuantity => ServiceUsages.Sum(s => s.UsedQuantity);

        /// <summary>
        /// C√≤n l·∫°i bao nhi√™u l∆∞·ª£t
        /// </summary>
        public int TotalRemainingQuantity => ServiceUsages.Sum(s => s.RemainingQuantity);

        /// <summary>
        /// Ph·∫ßn trƒÉm ƒë√£ s·ª≠ d·ª•ng g√≥i
        /// </summary>
        public decimal UsagePercentage => TotalServiceQuantity > 0
            ? (decimal)TotalUsedQuantity / TotalServiceQuantity * 100
            : 0;

        // ========== EXPIRY CHECKS ==========

        /// <summary>
        /// ƒê√£ h·∫øt h·∫°n ch∆∞a (theo th·ªùi gian)
        /// </summary>
        public bool IsExpiredByDate => ExpiryDate.HasValue && ExpiryDate.Value < DateTime.UtcNow;

        /// <summary>
        /// C√≤n bao nhi√™u ng√†y h·∫øt h·∫°n
        /// NULL n·∫øu kh√¥ng gi·ªõi h·∫°n th·ªùi gian ho·∫∑c ƒë√£ h·∫øt h·∫°n
        /// </summary>
        public int? DaysUntilExpiry
        {
            get
            {
                if (!ExpiryDate.HasValue) return null;
                var days = (ExpiryDate.Value - DateTime.UtcNow).Days;
                return days > 0 ? days : 0;
            }
        }

        /// <summary>
        /// Ghi ch√∫ c·ªßa customer khi mua
        /// </summary>
        public string? CustomerNotes { get; set; }
    }
}
